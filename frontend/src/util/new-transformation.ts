export const NEW_TRANSFORMATIONS: Array<{
  pattern: RegExp;
  replace: string;
}> = [
  // Rule: A + B = A + C
  ...[
    "فَ",
    "كَ",
    "وَكَ",
    "كَال",
    "فَكَال",
    "وَكَال",
    "كَلِ",
    "كَبِ",
    "وَكَبِ",
    "بِ",
    "أَبِ",
    "لِ",
    "أَلِ",
    "وَلِ",
    "وَ",
    "وَبِ",
    "فَبِ",
    "فَلِ",
    "لِل",
    "أَلِل",
    "وَلِل",
    "فَلِل",
    "ال",
    "فَوَال",
    "فَال",
    "وَبِال",
    "بِال",
    "أَبِال",
    "فَبِال",
  ].flatMap((prefix) => [
    { pattern: new RegExp(`${prefix}ءَ$`, "u"), replace: `${prefix}أَ` },
  ]),

  // Rule: A + D = A + E
  ...[
    "فَ",
    "كَ",
    "وَكَ",
    "كَال",
    "فَكَال",
    "وَكَال",
    "كَلِ",
    "كَبِ",
    "وَكَبِ",
    "بِ",
    "أَبِ",
    "لِ",
    "أَلِ",
    "وَلِ",
    "وَ",
    "وَبِ",
    "فَبِ",
    "فَلِ",
    "لِل",
    "أَلِل",
    "وَلِل",
    "فَلِل",
    "ال",
    "فَوَال",
    "فَال",
    "وَبِال",
    "بِال",
    "أَبِال",
    "فَبِال",
  ].flatMap((prefix) => [
    { pattern: new RegExp(`${prefix}ءُ$`, "u"), replace: `${prefix}أُ` },
  ]),

  // Rule: A + F = A + G
  ...[
    "فَ",
    "كَ",
    "وَكَ",
    "كَال",
    "فَكَال",
    "وَكَال",
    "كَلِ",
    "كَبِ",
    "وَكَبِ",
    "بِ",
    "أَبِ",
    "لِ",
    "أَلِ",
    "وَلِ",
    "وَ",
    "وَبِ",
    "فَبِ",
    "فَلِ",
    "لِل",
    "أَلِل",
    "وَلِل",
    "فَلِل",
    "ال",
    "فَوَال",
    "فَال",
    "وَبِال",
    "بِال",
    "أَبِال",
    "فَبِال",
  ].flatMap((prefix) => [
    { pattern: new RegExp(`${prefix}ءِ$`, "u"), replace: `${prefix}إِ` },
  ]),

  // Rule: H + H = H + J
  ...[
    "ج",
    "ح",
    "خ",
    "ه",
    "ع",
    "غ",
    "ف",
    "ق",
    "ث",
    "ص",
    "ض",
    "ك",
    "م",
    "ن",
    "ت",
    "ل",
    "ب",
    "ي",
    "س",
    "ش",
    "و",
    "ر",
    "ز",
    "د",
    "ذ",
    "ط",
    "ظ",
    "چ",
    "ڤ",
    "پ",
    "گ",
    "ژ",
  ].flatMap((letter) => [
    { pattern: new RegExp(`${letter}${letter}$`, "u"), replace: `${letter}ّ` },
  ]),
];
